import time
import streamlit as st
import build as bd


# Thi·∫øt l·∫≠p page
st.set_page_config(     
    page_title="Nh√≥m 1 - Tr√≠ tu·ªá t·ª± nhi√™n",      
    page_icon="üßä"  
)

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ
st.subheader('Tri·ªÉn khai c√°c thu·∫≠t to√°n cho b√†i to√°n SAT')

with st.sidebar:
    # S·ªë l∆∞·ª£ng bi·∫øn v√† m·ªánh ƒë·ªÅ cho Uniform Random-3-SAT
    num_vars = st.number_input('S·ªë l∆∞·ª£ng bi·∫øn:', value=10)
    num_clauses = st.number_input('S·ªë l∆∞·ª£ng m·ªánh ƒë·ªÅ:', value=40)
    backbone_size = st.number_input('K√≠ch th∆∞·ªõc backbone:', value=10)
# T·∫°o input cho Uniform Random-3-SAT
ur_3sat_instance = bd.Dataset.generate_uniform_random_3sat(num_vars, num_clauses)

# S·ªë l∆∞·ª£ng bi·∫øn v√† m·ªánh ƒë·ªÅ cho Random-3-SAT
# backbone_size = 10  # K√≠ch th∆∞·ªõc backbone

sat_instance = bd.Dataset.generate_random_3sat_instance(num_vars, num_clauses, backbone_size)

# S·ª≠ d·ª•ng h√†m generate_alpha ƒë·ªÉ t·∫°o alpha
alpha = bd.Dataset.generate_alpha(num_vars)

# In ra m·ªôt s·ªë th√¥ng tin v·ªÅ input
start_time = time.time()

with st.sidebar:
    dataset_type = st.selectbox('Ch·ªçn b·ªô d·ªØ li·ªáu:', ['ur_3sat_instance', 'sat_instance'])
    algorithm_type = st.selectbox('Ch·ªçn thu·∫≠t to√°n:', ['PL_Resolution', 'dpll', 'walksat'])

def data_type(dataset_type):
    if dataset_type == 'ur_3sat_instance':
        dataset_type = ur_3sat_instance
    elif dataset_type == 'sat_instance':
        dataset_type = sat_instance
    return dataset_type
    
st.write(f'Knowledge Base: {data_type(dataset_type)}')
st.write(f'Alpha: {alpha}')

def algo_type(algorithm_type):
    return algorithm_type

if algorithm_type == 'PL_Resolution':
    start_time = time.time()
    # Ki·ªÉm tra t√¨m ki·∫øm ph√©p ph√¢n gi·∫£i v·ªõi KB v√† alpha
    result = bd.Algorithm.PL_Resolution(ur_3sat_instance, alpha)

    end_time = time.time()
    execution_time = end_time - start_time

    if result:
        st.write("C√≥ ph√¢n gi·∫£i h·ª£p l√Ω v·ªõi KB v√† alpha.")
    else:
        st.write("Kh√¥ng c√≥ ph√¢n gi·∫£i h·ª£p l√Ω v·ªõi KB v√† alpha.")

    st.write(f"Th·ªùi gian th·ª±c thi: {execution_time} gi√¢y.")

elif algorithm_type == 'dpll':
    start_time = time.time()
    # Ki·ªÉm tra xem alpha c√≥ th·ªÉ ƒë∆∞·ª£c suy ra t·ª´ ur_3sat_instance kh√¥ng
    dpll_solution = bd.Algorithm.dpll(ur_3sat_instance + [alpha])
    end_time = time.time()
    execution_time = end_time - start_time

    if dpll_solution:
        st.write("T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i th·ªèa m√£n KB v√† alpha:")
        st.table(dpll_solution)
    else:
        st.write("Kh√¥ng t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i th·ªèa m√£n KB v√† alpha.")
    st.write(f"Th·ªùi gian th·ª±c thi: {execution_time} gi√¢y.")

else:
    start_time = time.time()
    # Gi·∫£i b√†i to√°n Uniform Random-3-SAT b·∫±ng WalkSAT v·ªõi alpha
    solution = bd.Algorithm.walksat(ur_3sat_instance, alpha)

    end_time = time.time()
    execution_time = end_time - start_time

    if solution:
        st.write("\nT√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i th·ªèa m√£n KB v√† alpha:")
        solution_str = ['Yes' if value == 1 else 'No' for value in solution]
        st.write(solution_str)
    else:
        st.write("\nKh√¥ng t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i th·ªèa m√£n KB v√† alpha.")
        
    st.write(f"Th·ªùi gian th·ª±c thi: {execution_time} gi√¢y.")
